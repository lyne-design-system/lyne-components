@use '../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  --sbb-loading-indicator-color: var(--sbb-color-red);

  display: inline-block;
  line-height: 0;
}

:host([color='smoke']) {
  --sbb-loading-indicator-color: var(--sbb-color-smoke);
}

:host([color='white']) {
  --sbb-loading-indicator-color: var(--sbb-color-white);
}

:host([variant='circle']) {
  --sbb-loading-indicator-height: var(--sbb-size-icon-ui-small);
  --sbb-loading-indicator-width: var(--sbb-size-icon-ui-small);
  --sbb-loading-indicator-padding: var(--sbb-border-width-2x);
  --sbb-loading-indicator-duration: var(--sbb-disable-animation-zero-time, 1.5s);
  --sbb-loading-indicator-background-color: var(--sbb-color-white);
  --sbb-loading-indicator-circle-background: conic-gradient(
    from 90deg,
    var(--sbb-loading-indicator-background-color),
    var(--sbb-loading-indicator-color)
  );
  --sbb-loading-indicator-circle-animated-width: 0.1875em;
  --sbb-loading-indicator-circle-animated-height: 0.1875em;
  --sbb-loading-indicator-circle-animated-border-radius: 50%;
}

:host([color='white'][variant='circle']) {
  --sbb-loading-indicator-background-color: var(--sbb-color-iron);
}

:host([variant='circle']) .sbb-loading-indicator {
  display: inline-flex;
  height: auto;
  width: auto;
  padding-inline: var(--sbb-loading-indicator-padding);
  padding-block: var(--sbb-loading-indicator-padding);
  vertical-align: middle;
  line-height: 1;
}

:host([variant='circle']) .sbb-loading-indicator__animated-element {
  width: 1.25em;
  height: 1.25em;
  display: inline-block;
  color: transparent;
  position: relative;
  margin: 0 auto;
  overflow: hidden;
  border-radius: 50%;
  background: var(--sbb-loading-indicator-circle-background);
  /* stylelint-disable-next-line property-no-vendor-prefix */
  -webkit-mask: radial-gradient(
    circle 0.4375em,
    #0000 98%,
    var(--sbb-loading-indicator-background-color)
  );
  mask: radial-gradient(circle 0.4375em, #0000 98%, var(--sbb-loading-indicator-background-color));
  animation: rotation var(--sbb-loading-indicator-duration) infinite linear;

  &::after {
    content: '';
    width: var(--sbb-loading-indicator-circle-animated-width);
    height: var(--sbb-loading-indicator-circle-animated-height);
    background: var(--sbb-loading-indicator-color);
    border-radius: var(--sbb-loading-indicator-circle-animated-border-radius);
    position: absolute;
    top: 50%;
    right: 0;
    transform: translateY(-50%);
    overflow: hidden;
    margin: auto;
    @include sbb.if-forced-colors {
      --sbb-loading-indicator-color: CanvasText;
      --sbb-loading-indicator-circle-animated-width: 50%;
      --sbb-loading-indicator-circle-animated-height: 100%;
      --sbb-loading-indicator-circle-animated-border-radius: 0;
    }
  }

  @include sbb.if-forced-colors {
    --sbb-loading-indicator-circle-background: transparent;
  }
}

:host([color='white'][variant='circle']) .sbb-loading-indicator__animated-element::after {
  @include sbb.if-forced-colors {
    --sbb-loading-indicator-color: var(--sbb-color-white);
  }
}

:host([variant='window']) {
  --sbb-loading-indicator-height: sbb.px-to-rem-build(32);
  --sbb-loading-indicator-width: sbb.px-to-rem-build(55);
  --sbb-loading-indicator-padding: 0;
  --sbb-loading-indicator-duration: var(
    --sbb-disable-animation-zero-time,
    var(--sbb-animation-duration-6x)
  );
}

:host([variant='window'][size='s']) {
  --sbb-loading-indicator-window-height: #{sbb.px-to-rem-build(26.66666)};
  --sbb-loading-indicator-window-padding-block-start: #{sbb.px-to-rem-build(10.66666)};
  --sbb-loading-indicator-window-element-width: #{sbb.px-to-rem-build(55.46666)};
  --sbb-loading-indicator-window-element-height: #{sbb.px-to-rem-build(5.33333)};
  --sbb-loading-indicator-window-element-perspective: #{sbb.px-to-rem-build(96)};
  --sbb-loading-indicator-window-element-animation-name: loading-container-small;
  --sbb-loading-indicator-window-last-span-width: #{sbb.px-to-rem-build(8.53333)};
  --sbb-loading-indicator-window-last-span-height: #{sbb.px-to-rem-build(5.33333)};
  --sbb-loading-indicator-window-last-span-margin: #{sbb.px-to-rem-build(3.2)};
  --sbb-loading-indicator-window-last-span-transform: translate3d(
    #{sbb.px-to-rem-build(-1.6)},
    0,
    0
  );
}

:host([variant='window'][size='l']) {
  --sbb-loading-indicator-window-height: #{sbb.px-to-rem-build(48)};
  --sbb-loading-indicator-window-padding-block-start: #{sbb.px-to-rem-build(19.2)};
  --sbb-loading-indicator-window-element-width: #{sbb.px-to-rem-build(92.7969)};
  --sbb-loading-indicator-window-element-height: #{sbb.px-to-rem-build(9.59375)};
  --sbb-loading-indicator-window-element-perspective: #{sbb.px-to-rem-build(128)};
  --sbb-loading-indicator-window-element-animation-name: loading-container-large;
  --sbb-loading-indicator-window-last-span-width: #{sbb.px-to-rem-build(16)};
  --sbb-loading-indicator-window-last-span-height: #{sbb.px-to-rem-build(9.59375)};
  --sbb-loading-indicator-window-last-span-margin: #{sbb.px-to-rem-build(3.2)};
}

:host([variant='window']) span {
  display: inline-block;
}

:host([variant='window']) .sbb-loading-indicator {
  display: flex;
  height: var(--sbb-loading-indicator-window-height);
  padding-block-start: var(--sbb-loading-indicator-window-padding-block-start);
}

:host([variant='window']) .sbb-loading-indicator__animated-element {
  margin: 0 auto;
  transform-origin: center;
  transform: translate3d(-3em, 0, 0);
  backface-visibility: hidden;
  transform-style: preserve-3d;
  width: var(--sbb-loading-indicator-window-element-width);
  height: var(--sbb-loading-indicator-window-element-height);
  perspective: var(--sbb-loading-indicator-window-element-perspective);
}

:host([variant='window']) .sbb-loading-indicator__animated-element > span {
  position: relative;
  transform: rotateY(50deg) translateZ(1em);
  transform-origin: right;
  backface-visibility: hidden;
}

:host([variant='window']) .sbb-loading-indicator__animated-element > span > span {
  position: relative;
  display: flex;
  animation-name: var(--sbb-loading-indicator-window-element-animation-name);
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  animation-duration: var(--sbb-loading-indicator-duration);
}

:host([variant='window']) .sbb-loading-indicator__animated-element > span > span > span {
  background: var(--sbb-loading-indicator-color);
  backface-visibility: hidden;
  outline: var(--sbb-border-width-1x) solid rgb(0 0 0 / 0%);
  width: var(--sbb-loading-indicator-window-last-span-width);
  height: var(--sbb-loading-indicator-window-last-span-height);
  margin-right: var(--sbb-loading-indicator-window-last-span-margin);
  transform: var(--sbb-loading-indicator-window-last-span-transform);

  &:nth-child(1) {
    animation: loading-rectangle1 var(--sbb-loading-indicator-duration) linear infinite;
  }

  &:nth-child(2) {
    animation: loading-rectangle2 var(--sbb-loading-indicator-duration) linear infinite;
  }

  &:nth-child(3) {
    animation: loading-rectangle3 var(--sbb-loading-indicator-duration) linear infinite;
  }

  &:nth-child(4) {
    animation: loading-rectangle4 var(--sbb-loading-indicator-duration) linear infinite;
  }

  &:nth-child(5) {
    animation: loading-rectangle5 var(--sbb-loading-indicator-duration) linear infinite;
  }

  &:last-child {
    margin-right: 0;
  }
}

@keyframes loading-container-small {
  0% {
    transform: translateX(0.73333em);
  }

  100% {
    transform: translateX(0);
  }
}

@keyframes loading-container-large {
  0% {
    transform: translateX(1.2em);
  }

  100% {
    transform: translateX(0);
  }
}

@keyframes loading-rectangle1 {
  0% {
    opacity: 0.5;
  }

  100% {
    opacity: 0;
  }
}

@keyframes loading-rectangle2 {
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0.5;
  }
}

@keyframes loading-rectangle3 {
  0% {
    opacity: 0.5;
  }

  100% {
    opacity: 1;
  }
}

@keyframes loading-rectangle4 {
  0% {
    opacity: 0.25;
  }

  100% {
    opacity: 0.5;
  }
}

@keyframes loading-rectangle5 {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 0.25;
  }
}

@keyframes rotation {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(359deg);
  }
}
