@use '../core/styles' as sbb;

// Box-sizing rules contained in typography are not traversing Shadow DOM boundaries. We need to include box-sizing mixin in every component.
@include sbb.box-sizing;

:host {
  --sbb-toast-max-width: #{sbb.px-to-rem-build(400)};
  --sbb-toast-animation-duration: var(
    --sbb-disable-animation-zero-time,
    var(--sbb-animation-duration-6x)
  );
  --sbb-toast-animation-timing-function: ease;
  --sbb-toast-color: var(--sbb-color-white);
  --sbb-toast-text-color: var(--sbb-color-milk);
  --sbb-toast-background-color: var(--sbb-color-midnight);
  --sbb-focus-outline-color: var(--sbb-focus-outline-color-dark);
  --sbb-toast-margin: var(--sbb-spacing-responsive-s);
  --sbb-toast-padding-block: var(--sbb-spacing-responsive-xxxs);
  --sbb-toast-padding-inline: var(--sbb-spacing-responsive-xs);
  --sbb-toast-border-radius: var(--sbb-border-radius-4x);
  --sbb-toast-container-display: flex;
  --sbb-toast-container-position: fixed;
  --sbb-toast-horizontal-position: initial;
  --sbb-toast-vertical-position: initial;

  display: block;
}

:host(:not([data-state])),
:host([data-state='closed']) {
  --sbb-toast-container-display: none;
}

:host([position='bottom-left']),
:host([position='bottom-start']) {
  --sbb-toast-horizontal-position: flex-start;
  --sbb-toast-vertical-position: flex-end;
}

:host([position='bottom-center']) {
  --sbb-toast-horizontal-position: center;
  --sbb-toast-vertical-position: flex-end;
}

:host([position='bottom-right']),
:host([position='bottom-end']) {
  --sbb-toast-horizontal-position: flex-end;
  --sbb-toast-vertical-position: flex-end;
}

:host([position='top-left']),
:host([position='top-start']) {
  --sbb-toast-horizontal-position: flex-start;
  --sbb-toast-vertical-position: flex-start;
}

:host([position='top-center']) {
  --sbb-toast-horizontal-position: center;
  --sbb-toast-vertical-position: flex-start;
}

:host([position='top-right']),
:host([position='top-end']) {
  --sbb-toast-horizontal-position: flex-end;
  --sbb-toast-vertical-position: flex-start;
}

.sbb-toast__overlay-container {
  position: var(--sbb-toast-container-position);
  pointer-events: none;
  inset: 0;
  display: var(--sbb-toast-container-display);
  justify-content: var(--sbb-toast-horizontal-position);
  align-items: var(--sbb-toast-vertical-position);
}

.sbb-toast {
  z-index: var(--sbb-toast-z-index, var(--sbb-overlay-default-z-index));
  pointer-events: auto;
  margin: var(--sbb-toast-margin);
  padding-block: var(--sbb-toast-padding-block);
  padding-inline: var(--sbb-toast-padding-inline);
  border-radius: var(--sbb-toast-border-radius);
  max-width: var(--sbb-toast-max-width);
  display: flex;
  color: var(--sbb-toast-color);
  background-color: var(--sbb-toast-background-color);

  :host([data-state='opening']) & {
    animation: {
      name: open;
      duration: var(--sbb-toast-animation-duration);
      timing-function: var(--sbb-toast-animation-timing-function);
    }
  }

  :host([data-state='closing']) & {
    animation: {
      name: close;
      duration: var(--sbb-toast-animation-duration);
      timing-function: var(--sbb-toast-animation-timing-function);
    }
  }
}

.sbb-toast__icon {
  margin-inline-end: var(--sbb-spacing-fixed-2x);
  line-height: initial;

  :host(:not([data-slot-names~='icon'], [icon-name])) & {
    display: none;
  }
}

.sbb-toast__content {
  @include sbb.title-6($exclude-spacing: true);

  color: var(--sbb-toast-text-color);
  flex: 1 1 0;
}

.sbb-toast__action {
  position: relative;

  // Since the action button has an absolute position, we have to "reserve" space
  min-width: #{sbb.px-to-rem-build(40)};

  :host(:not([data-slot-names~='action'], [dismissible])) & {
    display: none;
  }
}

::slotted([data-sbb-button]),
.sbb-toast__action-button {
  margin-inline: var(--sbb-spacing-fixed-2x);
  position: absolute;
  top: #{sbb.px-to-rem-build(-10)}; // Center vertically the element
}

::slotted(:is(sbb-link, sbb-link-button, sbb-link-static)) {
  margin-inline-start: var(--sbb-spacing-fixed-4x);
}

@keyframes open {
  from {
    visibility: hidden;
    opacity: 0;
    transform: translateY(var(--sbb-spacing-fixed-2x));
  }

  to {
    visibility: visible;
    opacity: 1;
    transform: translateY(0%);
  }
}

@keyframes close {
  from {
    visibility: visible;
    opacity: 1;
    transform: translateY(0%);
  }

  to {
    visibility: hidden;
    opacity: 0;
    transform: translateY(var(--sbb-spacing-fixed-2x));
  }
}
