import type {
  Args,
  Meta,
  StoryContext,
  StoryObj,
  WebComponentsRenderer,
  Decorator,
} from '@storybook/web-components';
import type { TemplateResult } from 'lit';
import { html } from 'lit';

import '../../elements/title.js';

// eslint-disable-next-line @typescript-eslint/naming-convention
type StoryParameter = Record<string, StoryObj> & { __namedExportsOrder?: string[] };

export function combineStories(config: Meta, stories: StoryParameter): StoryObj['render'] {
  const unCamelCase = (string: string): string =>
    string.replace(/([a-z])([A-Z])/g, '$1 $2').replace(/\b([A-Z]+)([A-Z])([a-z])/, '$1 $2$3');

  const decorators = (name: string, story: StoryObj): Decorator[] =>
    (
      [
        (story, context) =>
          html`<div style="margin-block-end: 2rem;">
            <sbb-title
              level="5"
              style="margin-block-end: 1rem; margin-block-start: 0; text-transform: capitalize;"
            >
              ${unCamelCase(name)}
            </sbb-title>
            <div
              style="outline: 1px solid #ad00ff;${context.parameters.originalLayout !== 'fullscreen'
                ? 'padding: 2rem;'
                : ''}${context.parameters.backgroundColor
                ? `background-color:${context.parameters.backgroundColor(context)};`
                : ''}"
            >
              ${story()}
            </div>
          </div> `,
      ] as Decorator[]
    )
      .concat(config.decorators || [])
      .concat(story.decorators || []);

  const reduceDecorators = (
    name: string,
    story: StoryObj,
    context: StoryContext,
  ): StoryObj['render'] =>
    decorators(name, story).reduceRight(
      (prevStory: () => WebComponentsRenderer['storyResult'], decorator: Decorator) => () =>
        decorator(prevStory, context),
      () => story.render!({ ...config.args, ...story.args }, context),
    );

  // __namedExportsOrder is an additional output for a story import generated by storybook.
  return (args: Args, context: StoryContext): TemplateResult => html`
    <div>
      ${stories
        .__namedExportsOrder!.map((name) => ({ name, story: stories[name] }))
        .filter((s) => typeof s.story.render === 'function')
        .map(({ name, story }) => {
          const storyContext = {
            ...context,
            args: { ...config.args, ...story.args },
          } as StoryContext;
          return reduceDecorators(name, story, storyContext)!(args, storyContext);
        })}
    </div>
  `;
}
